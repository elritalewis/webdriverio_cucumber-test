export default class SauceService {
    constructor(options: any);
    testCnt: number;
    failures: number;
    options: any;
    beforeSession(config: any, capabilities: any): void;
    config: any;
    capabilities: any;
    api: SauceLabs | undefined;
    isRDC: boolean | undefined;
    isServiceEnabled: boolean | undefined;
    before(): void;
    isUP: boolean | undefined;
    beforeSuite(suite: any): void;
    suiteTitle: any;
    beforeTest(test: any): void;
    afterSuite(suite: any): void;
    afterTest(test: any, context: any, results: any): void;
    beforeFeature(uri: any, feature: any): void;
    beforeScenario(uri: any, feature: any, scenario: any): void;
    afterScenario(uri: any, feature: any, pickle: any, result: any): void;
    after(result: any): any;
    onReload(oldSessionId: any, newSessionId: any): Promise<void> | undefined;
    updateJob(sessionId: any, failures: any, calledOnReload: boolean | undefined, browserName: any): Promise<void>;
    getBody(failures: any, calledOnReload: boolean | undefined, browserName: any): {
        name: any;
        passed: boolean;
    };
    updateUP(failures: number): any;
}
import SauceLabs from "saucelabs";
//# sourceMappingURL=service.d.ts.map